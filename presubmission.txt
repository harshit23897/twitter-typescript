1. I chose Mongodb for the database. It is good for real time analytics. For our current requirements I think it is a good choice.
2. No, my management API doesn't scale well since making twitter API calls for collecting tweets between Jan to May 2019 takes time. Also, I am using the free plan for API hence I can only make 1500 API calls in 15 minutes, which is very less.
3. No, I haven't designed core API endpoints to return large result sets.
4. No, it isn't resilient because of the free API of twitter which I am using which limits the number of requests which I can make. To make it more resilient, we should use the premium API of twitter.
5. I have handled basic failure scenarios like checking for unverified/invalid twitter usernames, impossible to add a username twice, etc. However, it is surely not covering all scenarios. 

Code:
(i) const handle: string = req.body.handle;
        this.checkVerifiedUser(handle)
          .then((response) => {
            if (response === false) {
              return res
                .status(400)
                .json("Invalid username or unverified user.");
            }

(ii) User.findOne({ name: handle }).then((user: IUser) => {
                if (user) {
                  return res.status(400).json("Username already exists");
                }

6. Yes, I think I have coded it in such a way so that I have to use the minimum number of API calls. For e.g., for getting user tweets I am fetching the maximum amount of tweets possible (200) and fetching only the tweets which haven't been fetched before.

Code:
params = {
          count: 200,
          max_id: tempTweetText.maxId,
          screen_name: handle
        };
connect.client.get(
        "statuses/user_timeline",
        params,
        (error, tweets, response)

7. Yes API documentation is human friendly.
8. No, I haven't think of that scenario.